# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DrypatchDockWidget
                                 A QGIS plugin
 This plugin detects dry patches from a satelite imagery layer 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-02-04
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Tuhin Roychowdhury
        email                : rc.tuhin02@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.core import QgsProject
from qgis.PyQt.QtWidgets import QFileDialog


FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'dp_detector_dockwidget_base.ui'))

class DrypatchDockWidget(QtWidgets.QDockWidget, FORM_CLASS):
    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(DrypatchDockWidget, self).__init__(parent)
        self.setupUi(self)

        self.populateLayers()
        self.browseButton.clicked.connect(self.selectModelPath)

    def populateLayers(self):
        layers = QgsProject.instance().mapLayers().values()
        for layer in layers:
            if layer.type() == layer.RasterLayer:
                self.layerComboBox.addItem(layer.name(), layer)

    def selectModelPath(self):
        modelPath, _ = QFileDialog.getOpenFileName(self, "Select YOLO Model File", "", "Model Files (*.weights *.h5)")
        if modelPath:
            self.modelPathLineEdit.setText(modelPath)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
